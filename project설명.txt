소규모 그룹웨어 프로젝트

1. 기술스택
사용 프레임워크 : react(jsx)
vite <----- (빌드 도구)
스타일링 : tailwind
백엔드(서버) : firebase
 - firestore, auth, storage
-----------------------옵션------------------
머터리얼 or 차크라ui를 활용했다면 -> ui컴포넌트 : Material UI
라우팅 : react-router
상태관리 : context API(zustand)

폴더구조 
 -> 처음부터 완벽하게 짜면 좋은건 맞음
 -> 하다보면 필요한 폴더들 같은건 계속 바뀌기 마련.
 -> 대략적으로 짜둔후에 필요한거 있으면 추가하는식으로 진행.
src/
├── assets/                 # 정적 리소스
├── components/             # 재사용 가능한 컴포넌트
│   ├── common/             # 공통 컴포넌트
│   ├── layout/             # 레이아웃 컴포넌트
│   ├── board/              # 게시판 관련 컴포넌트
│   ├── calendar/           # 일정 관리 컴포넌트
│   ├── tasks/              # 업무 관리 컴포넌트
│   └── chat/               # 채팅 컴포넌트
├── store/                # React Zustand
├── hooks/                  # 커스텀 훅
├── lib/                    # 유틸리티 및 Firebase 설정
├── pages/                  # 페이지 컴포넌트
├── routes/                 # 라우팅 설정
├── styles/                 # 스타일 관련 파일
├── App.jsx                 # 메인 App 컴포넌트
└── main.jsx                # 진입점

4.1 메인 대시보드
사용자 환영 배너

통계 카드 (완료한 작업, 진행 중인 작업 등)

공지사항 미리보기

작업 목록 미리보기

다가오는 일정 미리보기

빠른 액세스 메뉴

최근 활동 타임라인

팀 멤버 상태 표시

4.2 게시판 시스템
공지사항 및 일반 게시판 분리
 -> 이거 아무나 쓰면 될까? (권한별)
 -> 권한은 추후에 생각.
게시글 CRUD 기능
 -> 게시판 구현 자체.
댓글 및 대댓글 기능
 -> 기본이라 가져와봄
파일 첨부 기능
 -> storage 뚫어 놓고 진행.
태그 시스템
 -> 추후에 설명

검색 및 필터링 기능

4.3 업무 관리
칸반 보드 형식의 작업 관리
 -> github project에서 했던거 기억하면편함
작업 상태 변경 (드래그 앤 드롭)
 -> 마찬가지로..
작업 할당 및 마감일 설정
 -> 이 기능이 조금 귀찮을수 있음
우선순위 설정
 -> 응용사례1
작업 진행률 추적
 -> 응용사례2
4.4 일정 관리
월간/주간/일간 캘린더 뷰
 -> 구현하면서..
일정 생성 및 편집
 -> 우리 알던 todolist 응용
반복 일정 설정
 -> 마찬가지
팀 및 개인 일정 구분
 -> 연동되는 내용들이 상당할것.
알림 설정
 -> socket(추후 따로 설명예정)
4.5 실시간 채팅(socket / 여기까지 할수 있을지는 의문.)
 -> 챗봇도 가능.
개인 및 그룹 채팅
 -> socket 기본원리.
파일 공유
 -> 많이 어려움.
읽음 확인
 -> 카카오톡 1 사라지는지 아닌지. (읽씹 안읽씹)
온라인 상태 표시
 -> 초 심화 기능.
4.6 사용자 인증 (추후 구현)
이메일/비밀번호 로그인
 -> 구글 이메일을 우선 기준으로.
 -> github도 인증에 추가를할까? 
 -> 카카오를 추가할까?
사용자 프로필 관리
 -> 인증을 한 이메일 기준으로 프로필 관리 부분 구현.
권한 관리 (관리자, 일반 사용자 등)

사용자 데이터 모델
{
  id: string,
  displayName: string,
  email: string,
  role: string,
  department: string,
  photoURL: string,
  createdAt: timestamp
}
게시글
{
  id: string,
  title: string,
  content: string,
  author: string,
  authorId: string,
  createdAt: timestamp,
  updatedAt: timestamp,
  isNotice: boolean,
  tags: array,
  attachments: array,
  likes: number,
  viewCount: number,
  commentCount: number
}
댓글
{
  id: string,
  postId: string,
  content: string,
  author: string,
  authorId: string,
  parentId: string | null,
  createdAt: timestamp,
  likes: number
}
작업
{
  id: string,
  title: string,
  description: string,
  assignee: string,
  assigneeId: string,
  status: string,
  priority: string,
  dueDate: timestamp,
  createdAt: timestamp,
  updatedAt: timestamp,
  tags: array,
  attachments: array
}
일정
{
  id: string,
  title: string,
  description: string,
  startDate: timestamp,
  endDate: timestamp,
  location: string,
  organizer: string,
  organizerId: string,
  attendees: array,
  isAllDay: boolean,
  recurrence: object | null,
  reminder: object | null,
  createdAt: timestamp
}

// tasks 컬렉션
{
  id: string,
  title: string,
  description: string,
  status: 'todo' | 'in-progress' | 'review' | 'completed',
  priority: 'low' | 'medium' | 'high',
  assignee: {
    id: string,
    name: string,
    avatar: string
  },
  creator: {
    id: string,
    name: string
  },
  dueDate: timestamp,
  startDate: timestamp,
  completedDate: timestamp,
  createdAt: timestamp,
  updatedAt: timestamp,
  tags: [string],
  attachments: [
    {
      id: string,
      name: string,
      url: string,
      size: number,
      type: string
    }
  ],
  subtasks: [
    {
      id: string,
      title: string,
      completed: boolean
    }
  ],
  comments: [
    {
      id: string,
      author: {
        id: string,
        name: string
      },
      content: string,
      createdAt: timestamp
    }
  ],
  watchers: [string], // 사용자 ID 배열
  history: [
    {
      id: string,
      action: string,
      field: string,
      oldValue: any,
      newValue: any,
      user: {
        id: string,
        name: string
      },
      timestamp: timestamp
    }
  ]
}


ui/ux 
 - 기본적으로 페이징은 무한스크롤이나 페이지네이션 형태로 처리.
 - 게시글 검색 및 필터링 기능 처리
 - 파이어베이스 스토리지에 파일 업로드 기능 구현
 - 태그 기반 분류
 - 조회수, 따봉 기능
 - 댓글 중첩 표시 가능
 - 파일 미리보기(어려워요...)

이 프로젝트 개발과정의 원칙
사용자 중심 설계: 최종 사용자의 요구사항과 사용 패턴을 고려한 UI/UX 설계

모듈식 아키텍처: 기능별로 독립적인 모듈 구성으로 유지보수 용이성 확보

실시간 동기화: Firebase의 실시간 기능을 활용한 원활한 협업 경험 제공
 -> 결론은 파이어 베이스 쓸거다 인데 조금 어렵게 말함.

확장 가능성: 추후 기능 추가 및 사용자 증가에 대비한 확장 가능한 구조 설계
 
보안 및 프라이버시: 사용자 데이터 보호와 적절한 접근 제어 메커니즘 구현

react- icons 라이브러리 사용 x 
이유 : children 문제 
        -> 파라미터 ( 즉 자식으로 보낼 요소가 없는 , 혹은 상속받을게 없는 컴포넌트도 
                     react-icons 라이브러리가 적용되면 불필요한 props를 받는 문제가 있음)
       defaultProps 문제 
        -> 인식에서 문제점이 발생한다는 이슈가 있음
        제네릭 문법 제한
-> 소규모 프로젝트에서는 상관 x 
-> 대규모 프로젝트에서는 조심